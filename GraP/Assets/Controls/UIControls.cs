//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Player/UIControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UIControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UIControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UIControls"",
    ""maps"": [
        {
            ""name"": ""Move"",
            ""id"": ""78124338-b3f1-4fd5-a34e-cbfc34306273"",
            ""actions"": [
                {
                    ""name"": ""Arrows"",
                    ""type"": ""Value"",
                    ""id"": ""cc8302ed-a133-4ceb-85d8-fe8015f024da"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Approval"",
                    ""type"": ""Button"",
                    ""id"": ""0d3af93d-9722-4b09-acce-7fc515208c16"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2f3e25a6-2ae8-4122-b931-7ec1fb07bc74"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54195ca7-e350-45d5-9001-7abb2d462a23"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Approval"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Move
        m_Move = asset.FindActionMap("Move", throwIfNotFound: true);
        m_Move_Arrows = m_Move.FindAction("Arrows", throwIfNotFound: true);
        m_Move_Approval = m_Move.FindAction("Approval", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Move
    private readonly InputActionMap m_Move;
    private IMoveActions m_MoveActionsCallbackInterface;
    private readonly InputAction m_Move_Arrows;
    private readonly InputAction m_Move_Approval;
    public struct MoveActions
    {
        private @UIControls m_Wrapper;
        public MoveActions(@UIControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Arrows => m_Wrapper.m_Move_Arrows;
        public InputAction @Approval => m_Wrapper.m_Move_Approval;
        public InputActionMap Get() { return m_Wrapper.m_Move; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveActions set) { return set.Get(); }
        public void SetCallbacks(IMoveActions instance)
        {
            if (m_Wrapper.m_MoveActionsCallbackInterface != null)
            {
                @Arrows.started -= m_Wrapper.m_MoveActionsCallbackInterface.OnArrows;
                @Arrows.performed -= m_Wrapper.m_MoveActionsCallbackInterface.OnArrows;
                @Arrows.canceled -= m_Wrapper.m_MoveActionsCallbackInterface.OnArrows;
                @Approval.started -= m_Wrapper.m_MoveActionsCallbackInterface.OnApproval;
                @Approval.performed -= m_Wrapper.m_MoveActionsCallbackInterface.OnApproval;
                @Approval.canceled -= m_Wrapper.m_MoveActionsCallbackInterface.OnApproval;
            }
            m_Wrapper.m_MoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Arrows.started += instance.OnArrows;
                @Arrows.performed += instance.OnArrows;
                @Arrows.canceled += instance.OnArrows;
                @Approval.started += instance.OnApproval;
                @Approval.performed += instance.OnApproval;
                @Approval.canceled += instance.OnApproval;
            }
        }
    }
    public MoveActions @Move => new MoveActions(this);
    public interface IMoveActions
    {
        void OnArrows(InputAction.CallbackContext context);
        void OnApproval(InputAction.CallbackContext context);
    }
}
